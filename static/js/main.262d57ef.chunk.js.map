{"version":3,"sources":["components/WinnerMessage.js","components/StartMenu.js","components/GameBody.js","App.js","serviceWorker.js","index.js"],"names":["WinnerMessage","className","React","Component","gameDimensions","label","value","StartMenu","state","selectedOption","this","options","onChange","props","setGameDimension","GameBody","gameData","initialGameData","gameFinished","gameStarted","gameDimension","onItemClick","bind","makeMove","changeCoordinates","isGameFinished","row","cellIndex","rowIndex","indexOf","selectedDimension","initialArray","i","Math","pow","shift","push","setState","_","sort","random","reduce","rows","key","index","length","spaceRow","spaceCell","targetRow","targetCell","currentState","a","b","concat","initialState","every","map","cell","onClick","renderGameData","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.262d57ef.chunk.js","sourcesContent":["import React from 'react'\n\nclass WinnerMessage extends React.Component {\n  render() {\n    return (\n        <div className={\"win-msg\"}>\n          <h1>Winner</h1>\n        </div>\n    )\n  }\n}\n\nexport default WinnerMessage","import React from 'react';\nimport Select from 'react-select';\n\nconst gameDimensions = [\n    { label: 'three', value: '3' },\n    { label: 'four', value: '4' },\n    { label: 'five', value: '5' },\n    { label: 'six', value: '6'}\n]\n\nclass StartMenu extends React.Component {\n    state = {\n        selectedOption: null,\n    }\n    render() {\n        const { selectedOption } = this.state;\n        return (\n            <div>\n                <label className={\"dimension-label\"}>Choose game dimension</label><br/>\n                <Select\n                    value={selectedOption}\n                    options={gameDimensions}\n                    onChange={this.props.setGameDimension}\n                />\n            </div>\n        )\n    }\n}\n\nexport default StartMenu","import React from \"react\";\nimport WinnerMessage from \"./WinnerMessage\";\nimport StartMenu from \"./StartMenu\";\n\nclass GameBody extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            gameData: [],\n            initialGameData: [],\n            gameFinished: false,\n            gameStarted: false,\n            gameDimension: 0\n        }\n\n        this.onItemClick = this.onItemClick.bind(this)\n        this.makeMove = this.makeMove.bind(this)\n        this.changeCoordinates = this.changeCoordinates.bind(this)\n        this.isGameFinished = this.isGameFinished.bind(this)\n        this.setGameDimension = this.setGameDimension.bind(this)\n    }\n\n    onItemClick(row, cellIndex) {\n        const rowIndex = this.state.gameData.indexOf(row)\n        this.makeMove(cellIndex, rowIndex)\n    }\n\n    setGameDimension(selectedDimension) {\n        let initialArray = [];\n        for (let i = 0; i < Math.pow(selectedDimension.value, 2); i++) {\n            initialArray[i] = i;\n        }\n        //delete 0 from the beggining and add to the end\n        initialArray.shift();\n        initialArray.push(0);\n        this.setState(_ => ({\n            gameStarted: true,\n            gameDimension: selectedDimension.value,\n            initialGameData: [...initialArray],\n            gameData: initialArray\n                .sort(() => Math.random() - 0.5)\n                .reduce(\n                (rows, key, index) =>\n                    (index % selectedDimension.value === 0\n                        ? rows.push([key])\n                        : rows[rows.length - 1].push(key)) && rows,\n                    []\n                )\n        }))\n    }\n\n    makeMove(cellIndex, rowIndex) {\n        if (cellIndex > 0 && this.state.gameData[rowIndex][cellIndex - 1] === 0) {\n            this.changeCoordinates(rowIndex, cellIndex - 1, rowIndex, cellIndex);\n        } else if (\n            rowIndex < this.state.gameData.length - 1 &&\n            this.state.gameData[rowIndex + 1][cellIndex] === 0\n        ) {\n            this.changeCoordinates(rowIndex + 1, cellIndex, rowIndex, cellIndex);\n        } else if (\n            cellIndex < this.state.gameData.length - 1 &&\n            this.state.gameData[rowIndex][cellIndex + 1] === 0\n        ) {\n            this.changeCoordinates(rowIndex, cellIndex + 1, rowIndex, cellIndex);\n        } else if (\n            rowIndex > 0 &&\n            this.state.gameData[rowIndex - 1][cellIndex] === 0\n        ) {\n            this.changeCoordinates(rowIndex - 1, cellIndex, rowIndex, cellIndex);\n        }\n    }\n\n    changeCoordinates(spaceRow, spaceCell, targetRow, targetCell) {\n        this.setState(state => {\n            let gameData = state.gameData\n            gameData[spaceRow][spaceCell] = gameData[targetRow][targetCell]\n            gameData[targetRow][targetCell] = 0;\n            return {\n                gameData\n            }\n        })\n    }\n\n    isGameFinished() {\n        const currentState = this.state.gameData.reduce((a, b) => a.concat(b));\n        const initialState = this.state.initialGameData;\n        return initialState.every((row, index) => {\n            return initialState[index] === currentState[index]\n        })\n    }\n\n    renderGameData() {\n        return this.state.gameData.map((row, index) => {\n            return (\n                <tr key={index}>\n                    {row.map((cell, index, row) => {\n                        return (\n                            <td key={index} onClick={_ => this.onItemClick(row, index)}>\n                                {cell !== 0 ? cell : \"\"}\n                            </td>\n                        )\n                    })}\n                </tr>\n            )\n        })\n    }\n\n    componentDidUpdate() {\n        if (\n            this.isGameFinished() &&\n            this.state.gameStarted &&\n            !this.state.gameFinished\n        ) {\n            this.setState(_ => ({\n                gameFinished: true\n            }))\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {!this.state.gameStarted && (\n                    <StartMenu setGameDimension={this.setGameDimension} />\n                )}\n                {!this.state.gameFinished && this.state.gameStarted && (\n                    <table>\n                        <tbody>{this.renderGameData()}</tbody>\n                    </table>\n                )}\n                {this.state.gameFinished && this.state.gameStarted && <WinnerMessage />}\n            </div>\n        );\n    }\n}\n\nexport default GameBody","import React from 'react';\nimport GameBody from './components/GameBody'\nimport './App.css';\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <GameBody/>\n            </header>\n        </div>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n)\nserviceWorker.unregister();\n"],"sourceRoot":""}